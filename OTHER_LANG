### 1. الكود بلغة **Python**
في Python، التفاعل مع مكتبة .NET DLL يتطلب استخدام مكتبة `pythonnet` (clr). سأستخدم Tkinter لإنشاء واجهة مشابهة لـ Windows Forms ومحاكاة حدث النقر على الزر. إذا كانت المكتبة غير متاحة، سأوضح البدائل.

**المتطلبات**:
- تثبيت `pythonnet`:
  ```bash
  pip install pythonnet
  ```
- وجود المكتبة `InvoiceTool.dll` في مسار يمكن الوصول إليه.
- Python 3.7 أو أعلى مع بيئة Windows لدعم .NET.

```python
```python
import clr
import asyncio
from tkinter import messagebox
import tkinter as tk
from System import Decimal
from System.Windows.Forms import Application

# Load the InvoiceTool DLL
clr.AddReference("InvoiceTool")  # Path to InvoiceTool.dll
from InvoiceTool import InvoiceTool1, SellerInfo, BuyerInfo, InvoiceInfo, BuyerPartyIdentification, BillingReference, Currency, Governorate, Identification

class InvoiceForm(tk.Tk):
    def __init__(self):
        super().__init__()
        self.title("Invoice Form")
        self.geometry("300x200")

        # Create Button
        button1 = tk.Button(self, text="Submit Invoice", command=self.button1_click)
        button1.pack(pady=20)

    async def button1_click(self):
        try:
            # Initialize InvoiceTool1
            invoice_tool1 = InvoiceTool1()

            # Set Seller properties
            invoice_tool1.Seller = SellerInfo()
            invoice_tool1.Seller.CommercialName = "Seller Inc."
            invoice_tool1.Seller.IncomeSourceNumber = "12345"
            invoice_tool1.Seller.Address = "123 Main St"
            invoice_tool1.Seller.TaxNumber = "123456789"
            invoice_tool1.Seller.CountryCode = "1"  # JO

            # Set Buyer properties
            invoice_tool1.Buyer = BuyerInfo()
            invoice_tool1.Buyer.IsCashCustomer = True
            invoice_tool1.Buyer.Governorate = str(Governorate.Zarqa)
            invoice_tool1.Buyer.PartyIdentification = BuyerPartyIdentification()
            invoice_tool1.Buyer.PartyIdentification.CODE = "123456"
            invoice_tool1.Buyer.PartyIdentification.KIND = str(Identification.NIN)

            # Set Invoice properties
            invoice_tool1.Invoice = InvoiceInfo()
            invoice_tool1.Invoice.InvoiceNumber = "INV001"
            invoice_tool1.Invoice.InvoiceType = 0  # 0 Local, 1 Export, 2 Development Area
            invoice_tool1.Invoice.PaymentMethod = 1  # 1 Cash, 2 Receivables
            invoice_tool1.Invoice.InvoiceCurrency = str(Currency.JOD)
            invoice_tool1.Invoice.TaxCurrency = str(Currency.JOD)
            invoice_tool1.Invoice.IncomeSourceType = 1  # 1 Income, 2 General tax, 3 Special tax
            invoice_tool1.Invoice.TransactionType = 381  # 388 New Invoice, 381 AS BACK INVOICE
            invoice_tool1.Invoice.Notes = "Sample invoice"
            invoice_tool1.Invoice.RETURN_INVOICE = BillingReference()
            invoice_tool1.Invoice.RETURN_INVOICE.INVOICE_NUMBER = "RET001"
            invoice_tool1.Invoice.RETURN_INVOICE.INVOICE_TOATAL = Decimal(100.0)
            invoice_tool1.Invoice.RETURN_INVOICE.INVOICE_UUID = "UUID123"

            # Set SetupInvoice properties
            invoice_tool1.PortalUrl = "https://portal.jofotara.gov.jo/ar/invoices/"
            invoice_tool1.UserKey = "key123"
            invoice_tool1.UserSecureKey = "secure123"
            invoice_tool1.DigitalSignaturePath = r"C:\signature.pfx"
            invoice_tool1.AutoClose = True
            invoice_tool1.ShowResultToast = True

            # Add invoice items
            item_row = invoice_tool1.InvoiceItems.NewRow()
            item_row["ItemName"] = "Product A"
            item_row["ItemNo"] = "ISIC5-001"
            item_row["ItemPrice"] = 100.0
            item_row["Discount"] = 10.0
            item_row["VatTax"] = 16.0
            item_row["SpecialTax"] = 5
            item_row["ItemCount"] = 2
            item_row["TaxTYPE"] = "S"  # O Z S
            invoice_tool1.InvoiceItems.Rows.Add(item_row)

            invoice_tool1.Initialize()

            # Start the invoice process asynchronously
            await invoice_tool1.Start()

            # Check status
            if invoice_tool1.Status == "P":
                self.title(f"MSG={invoice_tool1.Status}")
            else:
                self.title(invoice_tool1.Status)
        except Exception as ex:
            messagebox.showerror("Error", f"Error: {str(ex)}")

    def run(self):
        # Run the async button click handler
        loop = asyncio.get_event_loop()



====================
### 1. الكود بلغة **C#**
C# هي الأقرب إلى VB.NET لأن كلاهما يعتمد على .NET Framework، لذا سيكون التحويل مباشرًا مع بعض التعديلات في الصياغة.

```csharp
```csharp
using System;
using System.Windows.Forms;
using System.Threading.Tasks;
using InvoiceTool; // Assuming InvoiceTool is the namespace of the DLL

namespace InvoiceApp
{
    public partial class Form1 : Form
    {
        public Form1()
        {
            InitializeComponent();
        }

        private async void Button1_Click(object sender, EventArgs e)
        {
            try
            {
                // Initialize InvoiceTool1 (assuming it's a class instance)
                var invoiceTool1 = new InvoiceTool1();

                // Set Seller properties
                invoiceTool1.Seller = new SellerInfo
                {
                    CommercialName = "Seller Inc.",
                    IncomeSourceNumber = "12345",
                    Address = "123 Main St",
                    TaxNumber = "123456789",
                    CountryCode = "1" // JO
                };

                // Set Buyer properties
                invoiceTool1.Buyer = new BuyerInfo
                {
                    IsCashCustomer = true,
                    Governorate = Governorate.Zarqa.ToString(),
                    PartyIdentification = new BuyerPartyIdentification
                    {
                        CODE = "123456",
                        KIND = Identification.NIN.ToString()
                    }
                }; // Automatically sets TaxNumber to "10" and clears other fields

                // Set Invoice properties
                invoiceTool1.Invoice = new InvoiceInfo
                {
                    InvoiceNumber = "INV001",
                    InvoiceType = 0, // 0 Local, 1 Export, 2 Development Area
                    PaymentMethod = 1, // 1 Cash, 2 Receivables
                    InvoiceCurrency = Currency.JOD.ToString(),
                    TaxCurrency = Currency.JOD.ToString(),
                    IncomeSourceType = 1, // 1 Income, 2 General tax, 3 Special tax
                    TransactionType = 381, // 388 New Invoice, 381 AS BACK INVOICE
                    Notes = "Sample invoice",
                    RETURN_INVOICE = new BillingReference
                    {
                        INVOICE_NUMBER = "RET001",
                        INVOICE_TOATAL = 100M, // Decimal in C#
                        INVOICE_UUID = "UUID123"
                    }
                };

                // Set SetupInvoice properties
                invoiceTool1.PortalUrl = "https://portal.jofotara.gov.jo/ar/invoices/";
                invoiceTool1.UserKey = "key123";
                invoiceTool1.UserSecureKey = "secure123";
                invoiceTool1.DigitalSignaturePath = @"C:\signature.pfx";
                invoiceTool1.AutoClose = true;
                invoiceTool1.ShowResultToast = true;

                // Add invoice items
                var itemRow = invoiceTool1.InvoiceItems.NewRow();
                itemRow["ItemName"] = "Product A";
                itemRow["ItemNo"] = "ISIC5-001";
                itemRow["ItemPrice"] = 100.0;
                itemRow["Discount"] = 10.0;
                itemRow["VatTax"] = 16.0;
                itemRow["SpecialTax"] = 5;
                itemRow["ItemCount"] = 2;
                itemRow["TaxTYPE"] = "S"; // O Z S
                invoiceTool1.InvoiceItems.Rows.Add(itemRow);

                invoiceTool1.Initialize();

                // Start the invoice process asynchronously
                await invoiceTool1.Start();

                // Check status
                if (invoiceTool1.Status == "P")
                {
                    this.Text = $"MSG={invoiceTool1.Status}";
                }
                else
                {
                    this.Text = invoiceTool1.Status;
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error: {ex.Message}", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }
    }
}
```
```

**ملاحظات C#**:
- **الصياغة**: استخدمت صياغة C# القياسية (مثل `var`, `=>`, `{ get; set; }`) مع الحفاظ على نفس المنطق.
- **غير متزامن**: استخدمت `async void` لـ `Button1_Click` و`await` لـ `Start()` لدعم العمليات غير المتزامنة.
- **الاستثناءات**: أضفت `try-catch` للتعامل مع الأخطاء العامة.
- **الـ Toast**: افترضت أن `ShowToast` متوفرة في المكتبة، وإلا يمكن استبدالها بـ `MessageBox`.
- **الأنواع**: استخدمت `decimal` (كـ `100M`) بدلاً من `Double` لـ `INVOICE_TOATAL` لدقة الأرقام العشرية.

### 2. الكود بلغة **C++**
في C++، التفاعل مع مكتبة .NET DLL يتطلب استخدام CLI/C++ لأن VB.NET يعتمد على .NET Framework. سأفترض أن `InvoiceTool1` متاحة كمكتبة مُدارة يمكن استدعاؤها عبر CLI/C++. الكود سيكون في مشروع Windows Forms باستخدام Visual C++.

```x-cpp
```cpp
#pragma once
#include <msclr/marshal_cppstd.h>
using namespace System;
using namespace System::Windows::Forms;
using namespace System::Threading::Tasks;
using namespace InvoiceTool; // Assuming InvoiceTool is the namespace of the DLL

namespace InvoiceApp {

    public ref class Form1 : public Form
    {
    public:
        Form1(void)
        {
            InitializeComponent();
        }

    protected:
        ~Form1()
        {
            if (components)
            {
                delete components;
            }
        }

    private:
        System::ComponentModel::Container^ components;
        Button^ button1;

        void InitializeComponent(void)
        {
            this->button1 = gcnew Button();
            this->button1->Location = System::Drawing::Point(12, 12);
            this->button1->Name = "button1";
            this->button1->Size = System::Drawing::Size(75, 23);
            this->button1->Text = "Button1";
            this->button1->Click += gcnew EventHandler(this, &Form1::Button1_Click);
            this->Controls->Add(this->button1);
        }

    private:
        System::Void Button1_Click(System::Object^ sender, System::EventArgs^ e)
        {
            try
            {
                // Initialize InvoiceTool1
                InvoiceTool1^ invoiceTool1 = gcnew InvoiceTool1();

                // Set Seller properties
                invoiceTool1->Seller = gcnew SellerInfo();
                invoiceTool1->Seller->CommercialName = "Seller Inc.";
                invoiceTool1->Seller->IncomeSourceNumber = "12345";
                invoiceTool1->Seller->Address = "123 Main St";
                invoiceTool1->Seller->TaxNumber = "123456789";
                invoiceTool1->Seller->CountryCode = "1"; // JO

                // Set Buyer properties
                invoiceTool1->Buyer = gcnew BuyerInfo();
                invoiceTool1->Buyer->IsCashCustomer = true;
                invoiceTool1->Buyer->Governorate = Governorate::Zarqa.ToString();
                invoiceTool1->Buyer->PartyIdentification = gcnew BuyerPartyIdentification();
                invoiceTool1->Buyer->PartyIdentification->CODE = "123456";
                invoiceTool1->Buyer->PartyIdentification->KIND = Identification::NIN.ToString();

                // Set Invoice properties
                invoiceTool1->Invoice = gcnew InvoiceInfo();
                invoiceTool1->Invoice->InvoiceNumber = "INV001";
                invoiceTool1->Invoice->InvoiceType = 0; // 0 Local, 1 Export, 2 Development Area
                invoiceTool1->Invoice->PaymentMethod = 1; // 1 Cash, 2 Receivables
                invoiceTool1->Invoice->InvoiceCurrency = Currency::JOD.ToString();
                invoiceTool1->Invoice->TaxCurrency = Currency::JOD.ToString();
                invoiceTool1->Invoice->IncomeSourceType = 1; // 1 Income, 2 General tax, 3 Special tax
                invoiceTool1->Invoice->TransactionType = 381; // 388 New Invoice, 381 AS BACK INVOICE
                invoiceTool1->Invoice->Notes = "Sample invoice";
                invoiceTool1->Invoice->RETURN_INVOICE = gcnew BillingReference();
                invoiceTool1->Invoice->RETURN_INVOICE->INVOICE_NUMBER = "RET001";
                invoiceTool1->Invoice->RETURN_INVOICE->INVOICE_TOATAL = 100.0;
                invoiceTool1->Invoice->RETURN_INVOICE->INVOICE_UUID = "UUID123";

                // Set SetupInvoice properties
                invoiceTool1->PortalUrl = "https://portal.jofotara.gov.jo/ar/invoices/";
                invoiceTool1->UserKey = "key123";
                invoiceTool1->UserSecureKey = "secure123";
                invoiceTool1->DigitalSignaturePath = "C:\\signature.pfx";
                invoiceTool1->AutoClose = true;
                invoiceTool1->ShowResultToast = true;

                // Add invoice items
                DataRow^ itemRow = invoiceTool1->InvoiceItems->NewRow();
                itemRow["ItemName"] = "Product A";
                itemRow["ItemNo"] = "ISIC5-001";
                itemRow["ItemPrice"] = 100.0;
                itemRow["Discount"] = 10.0;
                itemRow["VatTax"] = 16.0;
                itemRow["SpecialTax"] = 5;
                itemRow["ItemCount"] = 2;
                itemRow["TaxTYPE"] = "S"; // O Z S
                invoiceTool1->InvoiceItems->Rows->Add(itemRow);

                invoiceTool1->Initialize();

                // Start the invoice process asynchronously
                Task^ task = invoiceTool1->Start();
                task->Wait(); // Blocking wait for simplicity; use async/await in real apps

                // Check status
                if (invoiceTool1->Status == "P")
                {
                    this->Text = "MSG=" + invoiceTool1->Status;
                }
                else
                {
                    this->Text = invoiceTool1->Status;
                }
            }
            catch (Exception^ ex)
            {
                MessageBox::Show("Error: " + ex->Message, "Error", MessageBoxButtons::OK, MessageBoxIcon::Error);
            }
        }
    };
}
        loop.run_until_complete(self.button1_click())
        self.mainloop()

if __name__ == "__main__":
    app = InvoiceForm()
    app.run()
